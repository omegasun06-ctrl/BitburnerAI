// noinspection JSUnresolvedFunction,JSUnresolvedVariable

/**
 *
 * @param {NS} ns
 * @returns {Promise<void>}
 */
export async function main(ns) {
	// Download password list and check it
	const link = 'https://raw.githubusercontent.com/danielmiessler/SecLists/master/Passwords/Common-Credentials/10-million-password-list-top-10000.txt';
	const list = download(ns, link);
	await check(list);
	// or brute force your way
	// brute(ns);
}

/**
 *
 * @param {NS} ns
 * @param {string[]} list
 * @returns {Promise<void>}
 */
async function check(ns, list) {
	for (const s of list) {
		ns.rainbow(s);
		await ns.asleep(1);
	}
}

/**
 *
 * @param {NS} ns
 * @param {string} link
 * @returns {Promise<string[]>}
 */
async function download(ns, link) {
	let lines, done;
	const req = new XMLHttpRequest();
	req.onreadystatechange = function () {
		if (req.readyState === 4 && req.status === 200) {
			ns.print(`Processing successful response...`);
			const text = req.responseText;
			lines = text.split('\n');
		} else if (req.readyState === 4) ns.print(`Request failed with status ${req.status}`);
		else ns.print(`State: ${req.readyState}`);
		done = req.readyState === 4;
	};
	req.open('GET', link);
	req.send();
	while (!done) {
		await ns.asleep(5000);
	}
	return lines;
}

// noinspection JSUnusedLocalSymbols
/**
 *
 * @param {NS} ns
 * @param {boolean} lowercase
 * @param {boolean} uppercase
 * @param {boolean} numbers
 * @param {number} length
 * @returns {Promise<void>}
 */
async function brute(ns, lowercase = true, uppercase = false, numbers = false, length = 8) {
	const list = [];
	if (lowercase) for (let i = 'a'.charCodeAt(); i <= 'z'.charCodeAt(); i++) list.push(String.fromCharCode(i));
	if (uppercase) for (let i = 'A'.charCodeAt(); i <= 'Z'.charCodeAt(); i++) list.push(String.fromCharCode(i));
	if (numbers) for (let i = 0; i <= 9; i++) list.push(String(i));
	await force(ns, list, ns.rainbow, length);
}

/**
 *
 * @param {NS} ns
 * @param {string[]} list
 * @param {function} func
 * @param {number} limit
 * @param {number} k
 * @param {string} prepend
 * @param {boolean} callBig
 * @returns {Promise<void>}
 */
async function force(ns, list, func, limit, k = 1, prepend = '', callBig = true) {
	if (k <= 0 || k > limit) return;
	if (k === 1) for (let s of list) if (func(prepend + s)) return;
	for (let i = 0; i < list.length; i++) await force(ns, list, func, limit - 1, k - 1, prepend + list[i], false);
	if (callBig) await force(ns, list, func, limit, k + 1);
	await ns.asleep(1);
}

