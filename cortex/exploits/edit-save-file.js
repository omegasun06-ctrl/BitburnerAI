// noinspection JSDeprecatedSymbols,JSUnresolvedFunction

/**
 *
 * @returns {Promise<void>}
 */
export async function main() {
	let saveStr = decodeURIComponent(escape(atob(await load())));

	saveStr = saveStr.replace('\\"exploits\\":[', '\\"exploits\\":[\\"EditSaveFile\\",');

	saveStr = btoa(unescape(encodeURIComponent(saveStr)));
	await save(saveStr);
}

/**
 *
 * @returns {Promise<string>}
 */
function getDB() {
	return new Promise((resolve, reject) => {
		const win = eval('window');
		if (!win.indexedDB) reject(`Indexed DB does not exists`);
		const indexedDbRequest = win.indexedDB.open('bitburnerSave', 1);
		indexedDbRequest.onupgradeneeded = () => indexedDbRequest.result.createObjectStore('savestring');
		indexedDbRequest.onerror = ev => reject(`Failed to get IDB ${ev}`);
		indexedDbRequest.onsuccess = () => {
			const db = indexedDbRequest.result;
			if (!db) {
				reject(`database loading result was undefined`);
				return;
			}
			resolve(db.transaction(['savestring'], 'readwrite').objectStore('savestring'));
		};
	});
}

/**
 *
 * @returns {Promise<string>}
 */
function load() {
	return new Promise((resolve, reject) => {
		getDB().then(db => {
			return new Promise((resolve, reject) => {
				const request = db.get('save');
				request.onerror = ev => reject(`Error in Database request to get savestring: ${ev}`);
				request.onsuccess = () => resolve(request.result);
			}).then(saveString => resolve(saveString));
		}).catch(r => reject(r));
	});
}

/**
 *
 * @param {string} saveString
 * @returns {Promise<string>}
 */
function save(saveString) {
	return getDB().then((db) => {
		return new Promise((resolve, reject) => {
			const request = db.put(saveString, 'save');
			request.onerror = e => reject(`Error saving game to IndexedDB: ${e}`);
			request.onsuccess = () => resolve();
		});
	});
}